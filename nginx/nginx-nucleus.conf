# NGINX Config
# Domains: stackdemo.xyz, www.stackdemo.xyz
#
# Ports: 80, 443 - Serving both HTTPS and HTTP (HTTP is only used to issue a redirect to HTTPS.)
# NGINX_VERSION=1.23.1
#

user  nginx;
worker_processes  1;

pid        /var/run/nginx.pid;
#error_log  /var/log/nginx/error.log warn;
#error_log  /dev/stdout warn;
# DEBUG not for production use:
error_log  /dev/stdout debug;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;
    access_log  /dev/stdout  main;

    # Proxy cache settings. We named this cache zone "STATIC".
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;

    # TODO: This port number could change.
    # The hostname (server) of "nucleus-node" is for use on the Docker network via Docker Compose.
    # See docker-compose.yml, docker-compose.production.yml
    upstream upstream-nucleus-apollo {
        server nucleus-apollo:44000;
    }

################ MAIN SERVER BLOCK: ################
    server {
    # MAIN SERVER BLOCK - BARE DOMAIN - HTTPS - https://stackdemo.xyz
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name stackdemo.xyz;
        # Instead of specifying stackdemo.xyz, we could try generic default: server_name _;

        ssl_certificate /etc/nginx/ssl/stackdemo_xyz.crt;
        ssl_certificate_key /etc/nginx/ssl/stackdemo_xyz.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;
        ssl_dhparam /etc/nginx/ssl/nucleus_dhparam.pem;

        # intermediate configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate /etc/nginx/ssl/stackdemo_xyz.crt;

        # To get resolver IP, do this on the EC2:
        # cat /etc/resolv.conf | grep "nameserver"
        # Try to fix this:  cat /etc/resolv.conf | grep "nameserver" | awk '{print $2}' | tr '\n' ' '
        # Might need to maintain this in an ENV var so things work best on local as well as deployed.
        resolver 172.31.0.2;

        port_in_redirect off;

        keepalive_timeout 60;

        gzip on;
        gzip_proxied any;
        gzip_comp_level 4;
        gzip_types text/css application/javascript image/svg+xml;

        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        # Custom header example X-AutoDash. Not currently in use. 'dynamic' implies is could be a session ID part etc.
        proxy_set_header X-AutoDash: dynamic--default-0000-noop;

#         # LOCATION: SmartMetal Flask REST Services.
#         location /svc/ {
#             # Proxy-pass is plain HTTP between containers over Docker networking
#             proxy_pass http://upstream-nucleus-flask;
#         }
#         # LOCATION: Flask-served static files from /flask-static/ directory (or equivalent.)
#         location /a/ {
#             proxy_pass http://upstream-nucleus-flask;
#         }
#         # NOTE: To re-enable these, also create the host alias for upstream-nucleus-flask.

        # TODO: TEST THIS AS PART OF OVERALL NGINX CONFIG REFACTOR/CLEANUP/BEST-PRACTICE TUNE-UP.
        # LOCATION: STATUS, HEALTH-CHECK
        location /status {
            access_log off;
            default_type text/plain;
            add_header Content-Type text/plain;
            return 200 "alive";
            # TODO: The build process needs to parse in the version here. Something like this:
            #   return 200 "alive - build: v061";
        }  #### location - /status - simple health check handler

#         location /citadel {
#              allow 73.158.229.248;
#              deny all;
#             # TEST OF DENY FOR CITADEL AND ALSO OF NEED TO REPEAT PROXY SETTINGS
#             # RESULTS: This did not work without the proxy settings. Got a 404 when only had allow and deny lines.
#             # Conclusion: Location blocks that need to proxy pass need some or all of these headers.
#             proxy_redirect off;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection "upgrade";
#             proxy_set_header Host $host;
#             proxy_cache_bypass $http_upgrade;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-Proto $scheme;
#             proxy_set_header X-Forwarded-Host $host;
#             proxy_set_header X-Forwarded-Port $server_port;
#             # Custom header example X-AutoDash. Not currently in use. 'dynamic' implies it could be a session ID part etc.
#             proxy_set_header X-AutoDash: dynamic--default-0000-noop;
#             proxy_pass http://upstream-nucleus-node;
#         }  #### location - /citadel - special access control area

        location /apollo {
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            # Custom header example X-AutoDash. Not currently in use. 'dynamic' implies it could be a session ID part etc.
            proxy_set_header X-AutoDash: /apollo;
            proxy_pass http://upstream-nucleus-apollo;
        }  #### location - /apollo - Apollo GraphQL service

        location / {
            gzip off;
            index  index.html;
            root /usr/share/nginx/html/;
#             try_files $uri $uri/ =404;  # Not great for a React SPA. Reloads = 404s.
            # Default of /index.html works perfect with React Router. SPA location stays correct upon reloads.
            try_files $uri $uri/ /index.html;
        }  #### location - / - ROOT main site static content
    }  #### server - main

    server {
    # MAIN HTTP -> HTTPS REDIRECT ON BARE DOMAIN
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name stackdemo.xyz;
        port_in_redirect off;
        # NOTICE that our redirect is within a location block here but not below. No issues, just inconsistent.
        location / {
            return 301 https://stackdemo.xyz$request_uri;
        }
    }  #### server - main HTTP to HTTPS redirect - bare domain

    server {
    # WWW TO BARE DOMAIN REDIRECT - HTTP - http://www.stackdemo.xyz -> https://stackdemo.xyz
    # * Also does HTTP -> HTTPS redirect.
        listen 80;
        listen [::]:80;
        server_name www.stackdemo.xyz;
        port_in_redirect off;
        # TODO: Should we put a location / block around the 301? Like we did above? Regardless, all seems fine.
        return 301 https://stackdemo.xyz$request_uri;
    }  #### server - 80 plain - www to bare domain redirect

    server {
    # WWW TO BARE DOMAIN REDIRECT - HTTPS - https://www.stackdemo.xyz -> https://stackdemo.xyz
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name www.stackdemo.xyz;
        ssl_certificate /etc/nginx/ssl/stackdemo_xyz.crt;
        ssl_certificate_key /etc/nginx/ssl/stackdemo_xyz.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;
        ssl_dhparam /etc/nginx/ssl/nucleus_dhparam.pem;

        # intermediate configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate /etc/nginx/ssl/stackdemo_xyz.crt;

        # To get resolver IP, do this on the EC2:
        # cat /etc/resolv.conf | grep "nameserver"
        # Try to fix this:  cat /etc/resolv.conf | grep "nameserver" | awk '{print $2}' | tr '\n' ' '
        # Might need to maintain this in an ENV var so things work best on local as well as deployed.
        # SmartMetal EC2 is on the same VPC as BotFolk EC2, so this value is the same. Confirmed.
        resolver 172.31.0.2;

        port_in_redirect off;
        # TODO: Should we put a location / block around the 301? Like we did above? Regardless, all seems fine.
        return 301 https://stackdemo.xyz$request_uri;
    }  #### server - 443 ssl - www to bare domain redirect

    sendfile        on;
    keepalive_timeout  65;

    # Security: Suppress identification of NGINX and its version.
    server_tokens off;

}  #### http

