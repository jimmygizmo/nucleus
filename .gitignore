# .gitignore file for The Nucleus Stack

# In many of the following, we keep the about file there and ignore all else. (The same is done for .gitkeep files.)

# datavolume and dbvolume
# Git will not add anything inside this directory except the .gitkeep file which allows git to store an empty dir.
datavolume/*
!datavolume/.gitkeep
dbvolume/*
!dbvolume/.gitkeep

# /nginx/www/ target of combined /xwww/ content and /.next/ build output
nginx/www/*
!nginx/www/about-nginx-www.txt

# /nginx/nodesrc - The destination of the React build output copied by the build-prep script.
# This builds at the start of NGINX Dockerfile.
# Git will not add anything inside this directory except the .gitkeep file which allows git to store an empty dir.
nginx/nodesrc/*
!nginx/nodesrc/.gitkeep

# SSL:/TLS Certificates and Other Secrets
secrets/*
!secrets/about-secrets.txt

# SSL:/TLS Certificates - Build location
nginx/certs/*
!nginx/certs/about-nginx-certs.txt

# React app build output: (lives at /nucleus/build/)
**/build/


# The Node container wass used by the Next.js variant of Nucleus in past R&D versions
# /node/
#node/*
#!node/about-node.txt
#!node/node-notes.txt
#!node/Dockerfile


# /apollo/
# apollo/node_modules is covered by a general node_modules entry below


# MacOS
.DS_Store


# IntelliJ IDE settings directory. You almost never want your IDE settings in the repository unless
# you have a very specific need like some helpful settings for an entire team to use and then,
# you need to account for the same directory being generated and modified by team members.
# Almost everyone simply excludes all IDE settings files and directories in all cases.
.idea/


# Directory to briefly hold working files inside the project but not add them to git.
# * Tell your IDE to exclude/ignore this directory to reduce indexing & inspection overhead.
todo/


# TODO: Move most of this info to documentation and keep just a short version of it next to the entry.
# Build version file created at build+deploy time by auto script
# <OBFUSCATED-PATH> would be like a very low-security password concept where you have a directory on your
# site that is accessible to anyone, but is hidden by not being linked to and having a name that is difficult
# to see, remember, guess etc. Don't keep sensitive information in such an "obfuscated" directory.
# I use it to keep a list of links to protoype pages/sections of a site.
# It's also where I output the build a global build identifier so I can easily veryfy the build identity of an
# running instance. You need to be able to do that. But there is no need for fuch a file to be easily accessible,
# but simply obfuscating the path seems like the right thing to do. Then you have the option to do some other
# things inside such a directory. Maybe this is where you would put the initial login portal for some administrative
# functions that your dont want handled by your main public application login portal.
# Here are some ideas: 1l1lO0O0, 0o1l0ol, O0O0, 11ll11ll
# Patterns like this work to keep the directory open and accessible, but not easily glimpsed and remembered
# or guessed, which is a nice way to keep it as a semi-private, yet convenient, accessible directory/path.
#
#**/<OBFUSCTED-PATH>/version.txt


# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

############################
# Below are the remnants of the .gitignore file created by create-react-app and installed inside the web app directory
# (/nucleus/) but I only want one .gitignore file at the moment, so the following entries are being analyzed and
# then cleanly consolidated into this existing .gitignore file. About half of those entries have been addressed.

# Also, generally this file could use a lot of
# cleanup. It is a very important file in this project and most of thie .gitignore file is from the one which
# GitHub gives you for Node and it has a lot of things in it we do not need.
# TODO: Clean up and fully organize this project root .gitignore

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# misc
.env.local
.env.development.local
.env.test.local
.env.production.local

